local Rayfield = loadstring(game:HttpGet('https://pastebin.com/raw/MUE0dHLN'))()

local Window = Rayfield:CreateWindow({
    Name = "Universe Hub",
    LoadingTitle = "Loading Universe",
    LoadingSubtitle = "Feito com bumbum",
    ConfigurationSaving = {
        Enabled = true,
        FolderName = "Universe Hub", -- Create a custom folder for your hub/game
        FileName = "Project Slayer Map 1",
        Rayfield:LoadConfiguration()
    }})

    local AutoBoss = Window:CreateTab("Auto Farm Boss")
    local killauraTab = Window:CreateTab("KillAura")
    local Misc = Window:CreateTab("Misc")
    local TeleportTween1 = Window:CreateTab("Tween TP")
    local Teleports1 = Window:CreateTab("Insta TP ")

local UIS = game:GetService("UserInputService")
local VirtualUser = game:GetService("VirtualUser")
local VIM =game:GetService("VirtualInputManager")
local ReplStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local Imput = game:GetService("UserInputService")
local COREGUI = game:GetService("CoreGui")
local LP = game:GetService("Players").LocalPlayer
local HttpService = game:GetService("HttpService")
local RunS = game:GetService("RunService")
local X, Y = 0, 0
local Mouse = LP:GetMouse()
local GetLocalName = LP.Name
local request = (syn and syn.request) or (http and http.request) or http_request
local client = game:GetService("Players").LocalPlayer
local Plr = game:GetService("Players").LocalPlayer
local Data = game:GetService("ReplicatedStorage")["Player_Data"][game.Players.LocalPlayer.Name]
local Plr = game:GetService("Players").LocalPlayer
local TweenService = game:GetService("TweenService")
local Plr = game:GetService("Players").LocalPlayer
local Data = game:GetService("ReplicatedStorage")["Player_Data"][Plr.Name]
local Instance_new = Instance.new
local Vector3_new = Vector3.new
local CFrame_new = CFrame.new
local CFrame_Angles = CFrame.Angles
local coroutine_wrap = coroutine.wrap
local coroutine_yield = coroutine.yield
local coroutine_running = coroutine.running
local string_find = string.find
local string_match = string.match
local string_gsub = string.gsub
local string_sub = string.sub
local string_byte = string.byte
local string_split = string.split
local table_concat = table.concat
local table_insert = table.insert
local debug_traceback = debug.traceback
local math_rad = math.rad
local math_abs = math.abs
local math_floor = math.floor
local pog pog = nil
local game = game
local delay = delay
local wait = wait
local rawget = rawget
local error = error
local rawset = rawset
local assert = function(p1, p2, p3)
if not p1 then
error(p2, p3)
end
end
local newproxy = newproxy
local ipairs = ipairs
local getmetatable = getmetatable
local setmetatable = setmetatable
local tostring = tostring
local tonumber = tonumber
local type = type
local typeof = typeof
local pcall = pcall
local xpcall = xpcall
local setfenv = setfenv
local getfenv = getfenv
local workspace = workspace
local newcclosure = newcclosure or function(p1)

end
local workspace = workspace
local player = game.Players.LocalPlayer
local weapons = {}
local mobs = {}
local character = player.Character or player.CharacterAdded:Wait()
local client = game:GetService("Players").LocalPlayer
local user = client.Name
local TweenService = game:GetService("TweenService")
local noclipE = nil
local antifall = nil
local MoveTo = Instance_new("Model").MoveTo

function RN()
    mobs = {}
    for _,v in pairs(game:GetService("Workspace").Mobs:GetDescendants()) do -- LOOPS THROUGH ALL MOBS
        if v:IsA("Model") and v:FindFirstChild("Humanoid") and v:FindFirstChild("Humanoid").Health > 0 then
        insert = true -- VALUE TO CHECK THE MOB
        for _,v2 in pairs(mobs) do if v2.Name == v.Name or v2 == v then insert = false end end -- CHECKS IF MOB IS ALREADY IN THE TABLE
        if insert then table.insert(mobs, v) end -- IF THE MOB ISNT INSERTED THEN INSERT IT
        end
    end
end
RN()

local function noclip()
    for i, v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
        if v:IsA("BasePart") and v.CanCollide == true then
            v.CanCollide = false
            game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = Vector3.new(0, 0, 0)
        end
    end
end

local function moveto(obj, speed)
    local info = TweenInfo.new(((client.Character.HumanoidRootPart.Position - obj.Position).Magnitude) / speed,Enum.EasingStyle.Linear)
    local tween = TweenService:Create(client.Character.HumanoidRootPart, info, {CFrame = obj})
    if not client.Character.HumanoidRootPart:FindFirstChild("BodyVelocity") then
        antifall = Instance.new("BodyVelocity", client.Character.HumanoidRootPart)
        antifall.Velocity = Vector3.new(0, 0, 0)
        noclipE = game:GetService("RunService").Stepped:Connect(noclip) 
        tween:Play()
        tween.Completed:Wait()
        antifall:Destroy()
        noclipE:Disconnect()
    end
end

function findMob()
    local largest = math.huge
    local closestChild = nil
    local hrp = character:WaitForChild("HumanoidRootPart")
    for i, v in pairs(game:GetService("Workspace").Mobs:GetDescendants()) do
        if v:IsA("Model") and v:FindFirstChild("Humanoid") and v:FindFirstChild("Humanoid").Health > 0 and v.Name == getgenv().Selected then
            local magnitude = (character.HumanoidRootPart.Position - v:GetBoundingBox().Position).magnitude
            if magnitude < largest then
                closestChild = v
                largest = magnitude
            end
        end
    end
    return closestChild
end

function findBoss()
    local largest = math.huge
    local closestChild = nil
    local hrp = character:WaitForChild("HumanoidRootPart")
    for i, v in pairs(game:GetService("Workspace").Mobs.Bosses:GetDescendants()) do
        if v:IsA("Model") and v:FindFirstChild("Humanoid") and v:FindFirstChild("Humanoid").Health > 0 then
            if v.Name == "Akeza" or v.Name == "Rengoku" or v.Name == "Douma" or v.Name == "Tengen" then
                closestChild = v
                return closestChild
            end
            local magnitude = (character.HumanoidRootPart.Position - v:GetBoundingBox().Position).magnitude
            if magnitude < largest then
                closestChild = v
                largest = magnitude
            end
        end
    end
    return closestChild
end

function findMob1()
    local largest = math.huge
    local closestChild = nil
    local hrp = character:WaitForChild("HumanoidRootPart")
    for i, v in pairs(game:GetService("Workspace").Mobs:GetDescendants()) do
        if v:IsA("Model") and v:FindFirstChild("Humanoid") and v:FindFirstChild("Humanoid").Health > 0 then
            local magnitude = (character.HumanoidRootPart.Position - v:GetBoundingBox().Position).magnitude
            if magnitude < largest then
                closestChild = v
                largest = magnitude
            end
        end
    end
    return closestChild
end

Skills = {
    Z = false,
    X = false,
    C = false,
    V = false,
    B = false,
    N = false,
}
local mod = require(game:GetService("ReplicatedStorage").Modules.Server["Skills_Modules_Handler"])
getrenv()._G.handle_irregular = nil
getrenv()._G.cuasdamsndasdasd = nil

_G.cuasdamsndasdasd = function()
    return
end

_G.handle_irregular = function()
    return false
end

mod.Kick = function()
    return
end

game:GetService("Players").LocalPlayer.PlayerScripts["Small_Scripts"]["Client_Global_utility"].Disabled = true
game:GetService("Players").LocalPlayer.PlayerScripts["Small_Scripts"]["client_global_delete_script"].Disabled = true
game:GetService("Players").LocalPlayer.PlayerScripts["Small_Scripts"]["Client_Global_utility"]:GetPropertyChangedSignal("Disabled"):Connect(function()
    game:GetService("Players").LocalPlayer.PlayerScripts["Small_Scripts"]["Client_Global_utility"].Disabled = true
    game:GetService("Players").LocalPlayer.PlayerScripts["Small_Scripts"]["client_global_delete_script"].Disabled = true
end)

value = "Above"
mode = value

AutoBoss:CreateToggle({
    Name = "Farm All Boss",
    Callback = function (v)
        getgenv().FarmAllBosses = v
        local Humanoid = character.Humanoid
        local hrp = character:WaitForChild("HumanoidRootPart")
        while task.wait() do
            if getgenv().FarmAllBosses == false then return end

            local mob = findBoss()
            if mob == nil then
                while task.wait() do
                    task.wait()
                    if getgenv().FarmAllBosses == false then return end
                    if findBoss() ~= nil then break end
                end
            else
                while wait() do
                    task.wait()

                    if getgenv().FarmAllBosses == false then return end

                    if mob and mob:FindFirstChild("Humanoid") ~= nil and mob:FindFirstChild("Humanoid").Health > 0 then
                        local ehum = mob:WaitForChild("Humanoid")
                        local character = player.Character
                        local hrp = character:WaitForChild("HumanoidRootPart")
                        
                        if mode == "Above" then
                            repeat
                                task.wait()
                                local character = player.Character
                                local hrp = character:WaitForChild("HumanoidRootPart")
                                local magnitude = (character.HumanoidRootPart.Position - mob:GetModelCFrame().Position).magnitude
                                if magnitude > 20 then
                                    moveto(mob:GetModelCFrame() * CFrame.new(0, tonumber(getgenv().dist), 0) * CFrame.Angles(math.rad(-90), 0, 0), 300)
                                else
                                    hrp.CFrame = mob:GetModelCFrame() * CFrame.new(0, tonumber(getgenv().dist), 0) * CFrame.Angles(math.rad(-90), 0, 0)
                                end
                            until not FarmAllBosses or mob:FindFirstChild("Humanoid").Health <= 0
                            noclipE:Disconnect()
                        elseif mode == nil then
                            game.StarterGui:SetCore()
                        end
                    else
                        break
                    end
                end
            
            end
            task.wait()
        end
    end
})


AutoBoss:CreateToggle({
    Name = "Farm All Boss (Above)",
    Callback = function (v)
        getgenv().FarmAllBosses = v
        local Humanoid = character.Humanoid
        local hrp = character:WaitForChild("HumanoidRootPart")
        while task.wait() do
            if getgenv().FarmAllBosses == false then return end

            local mob = findBoss()
            if mob == nil then
                while task.wait() do
                    task.wait()
                    if getgenv().FarmAllBosses == false then return end
                    if findBoss() ~= nil then break end
                end
            else
                while wait() do
                    task.wait()

                    if getgenv().FarmAllBosses == false then return end

                    if mob and mob:FindFirstChild("Humanoid") ~= nil and mob:FindFirstChild("Humanoid").Health > 0 then
                        local ehum = mob:WaitForChild("Humanoid")
                        local character = player.Character
                        local hrp = character:WaitForChild("HumanoidRootPart")
                        
                        if mode == "Above" then
                            repeat
                                task.wait()
                                local character = player.Character
                                local hrp = character:WaitForChild("HumanoidRootPart")
                                local magnitude = (character.HumanoidRootPart.Position - mob:GetModelCFrame().Position).magnitude
                                if magnitude > 20 then
                                    moveto(mob:GetModelCFrame() * CFrame.new(0, 10, 0) * CFrame.Angles(math.rad(-90), 0, 0), 300)
                                else
                                    hrp.CFrame = mob:GetModelCFrame() * CFrame.new(0, 10, 0) * CFrame.Angles(math.rad(-90), 0, 0)
                                end
                            until not FarmAllBosses or mob:FindFirstChild("Humanoid").Health <= 0
                            noclipE:Disconnect()
                        elseif mode == nil then
                            game.StarterGui:SetCore()
                        end
                    else
                        break
                    end
                end
            
            end
            task.wait()
        end
    end
})

AutoBoss:CreateToggle({
    Name = "Farm All Boss (Front)",
    Callback = function (v)
        getgenv().FarmAllBosses = v
        local Humanoid = character.Humanoid
        local hrp = character:WaitForChild("HumanoidRootPart")
        while task.wait() do
            if getgenv().FarmAllBosses == false then return end

            local mob = findBoss()
            if mob == nil then
                while task.wait() do
                    task.wait()
                    if getgenv().FarmAllBosses == false then return end
                    if findBoss() ~= nil then break end
                end
            else
                while wait() do
                    task.wait()

                    if getgenv().FarmAllBosses == false then return end

                    if mob and mob:FindFirstChild("Humanoid") ~= nil and mob:FindFirstChild("Humanoid").Health > 0 then
                        local ehum = mob:WaitForChild("Humanoid")
                        local character = player.Character
                        local hrp = character:WaitForChild("HumanoidRootPart")
                        
                        if mode == "Above" then
                            repeat
                                task.wait()
                                local character = player.Character
                                local hrp = character:WaitForChild("HumanoidRootPart")
                                local magnitude = (character.HumanoidRootPart.Position - mob:GetModelCFrame().Position).magnitude
                                if magnitude > 20 then
                                    moveto(mob:GetModelCFrame() * CFrame.new(0, 10, 0) * CFrame.Angles(math.rad(-90), 0, 0), 300)
                                    
                                else
                                    hrp.CFrame = mob:GetModelCFrame() * CFrame.new(0, 0, -8) * CFrame.Angles(0, math.rad(180), 0)

                                end
                            until not FarmAllBosses or mob:FindFirstChild("Humanoid").Health <= 0
                            noclipE:Disconnect()
                        elseif mode == nil then
                            game.StarterGui:SetCore()
                        end
                    else
                        break
                    end
                end
            
            end
            task.wait()
        end
    end
})

killauraTab:CreateToggle({
    Name = "Fist",
    Flag = "",
    Callback = function (bool)
        if bool then
            getgenv().killaura = true -- an toggle, set false if u wanna disable, and true if u wanna enable.
    getgenv().method = "fist_combat" 

    local ReplStorage = game:GetService("ReplicatedStorage") -- não altere
    local Players = game:GetService("Players")
    local client = game:GetService("Players").LocalPlayer
    
    while killaura do -- verifica se está ativo o toggle

        getgenv().dist = 8
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
       game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash") 
        wait(0.8)
    getgenv().dist = 30
        wait(0.3)
    wait(1) end -- loops.
    else
        getgenv().killaura = false
        end
    end
})

killauraTab:CreateToggle({
    Name = "Sword",
    Flag = "",
    Callback = function (bool)
        if bool then
            getgenv().killaura = true -- an toggle, set false if u wanna disable, and true if u wanna enable.
    getgenv().method = "Sword_Combat_Slash"
    -- theres 5 methods of attacking, fist_combat - fist,
    -- fans_combat_slash - war fans, 
    -- claw_Combat_Slash - claws, 
    -- Scythe_Combat_Slash - scythe, 
    -- Sword_Combat_Slash - sword.
    
    -- // locals
    local ReplStorage = game:GetService("ReplicatedStorage") -- não altere
    local Players = game:GetService("Players")
    local client = game:GetService("Players").LocalPlayer
    
    while killaura do -- verifica se está ativo o toggle

        getgenv().dist = 8
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
       game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash") 
        wait(0.8)
    getgenv().dist = 30
        wait(0.3)
    wait(1) end -- loops.
    else
        getgenv().killaura = false
        end
    end
})

killauraTab:CreateToggle({
    Name = "Fans (CAN KICK)",
    Flag = "",
    Callback = function (bool)
        if bool then
            getgenv().killaura = true -- an toggle, set false if u wanna disable, and true if u wanna enable.
    getgenv().method = "fans_combat_slash"
    -- theres 5 methods of attacking, fist_combat - fist,
    -- fans_combat_slash - war fans, 
    -- claw_Combat_Slash - claws, 
    -- Scythe_Combat_Slash - scythe, 
    -- Sword_Combat_Slash - sword.
    
    -- // locals
    local ReplStorage = game:GetService("ReplicatedStorage") -- não altere
    local Players = game:GetService("Players")
    local client = game:GetService("Players").LocalPlayer
    
    while killaura do -- verifica se está ativo o toggle

        getgenv().dist = 8
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
       game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash") 
        wait(0.8)
    getgenv().dist = 30
        wait(0.3)
    wait(1) end -- loops.
    else
        getgenv().killaura = false
        end
    end
})

killauraTab:CreateToggle({
    Name = "Scythe",
    Flag = "",
    Callback = function (bool)
        if bool then
            getgenv().killaura = true -- an toggle, set false if u wanna disable, and true if u wanna enable.
    getgenv().method = "Scythe_Combat_Slash"
    -- theres 5 methods of attacking, fist_combat - fist,
    -- fans_combat_slash - war fans, 
    -- claw_Combat_Slash - claws, 
    -- Scythe_Combat_Slash - scythe, 
    -- Sword_Combat_Slash - sword.
    
    -- // locals
    local ReplStorage = game:GetService("ReplicatedStorage") -- não altere
    local Players = game:GetService("Players")
    local client = game:GetService("Players").LocalPlayer
    
    while killaura do -- verifica se está ativo o toggle

        getgenv().dist = 8
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
       game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash") 
        wait(0.8)
    getgenv().dist = 30
        wait(0.3)
    wait(1) end -- loops.
    else
        getgenv().killaura = false
        end
    end
})

killauraTab:CreateToggle({
    Name = "Claw",
    Flag = "",
    Callback = function (bool)
        if bool then
            getgenv().killaura = true -- an toggle, set false if u wanna disable, and true if u wanna enable.
    getgenv().method = "claw_Combat_Slash"
    -- theres 5 methods of attacking, fist_combat - fist,
    -- fans_combat_slash - war fans, 
    -- claw_Combat_Slash - claws, 
    -- Scythe_Combat_Slash - scythe, 
    -- Sword_Combat_Slash - sword.
    
    -- // locals
    local ReplStorage = game:GetService("ReplicatedStorage") -- não altere
    local Players = game:GetService("Players")
    local client = game:GetService("Players").LocalPlayer
    
    while killaura do -- verifica se está ativo o toggle

        getgenv().dist = 8
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
       game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.1)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash") 
        wait(0.8)
    getgenv().dist = 30
        wait(0.3)
    wait(1) end -- loops.
    else
        getgenv().killaura = false
        end
    end
})

killauraTab:CreateLabel("KillAura OP (CAN KICK)")

killauraTab:CreateToggle({
    Name = "Fist",
    Callback = function (bool)
        if bool then
            getgenv().killaura = true -- an toggle, set false if u wanna disable, and true if u wanna enable.
    getgenv().method = "fist_combat" 
    -- theres 5 methods of attacking, fist_combat - fist,
    -- fans_combat_slash - war fans, 
    -- claw_Combat_Slash - claws, 
    -- Scythe_Combat_Slash - scythe, 
    -- Sword_Combat_Slash - sword.
    
    -- // locals
    local ReplStorage = game:GetService("ReplicatedStorage") -- não altere
    local Players = game:GetService("Players")
    local client = game:GetService("Players").LocalPlayer
    
    while killaura do -- verifica se está ativo o toggle
        getgenv().dist = 8
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.5)
        getgenv().dist = 30
    wait(1.2) end -- loops.
    else
        getgenv().killaura = false
        end
    end
})
killauraTab:CreateToggle({
    Name = "Sword",
    Callback = function (bool)
        if bool then
            getgenv().killaura = true -- an toggle, set false if u wanna disable, and true if u wanna enable.
    getgenv().method = "Sword_Combat_Slash"
    -- theres 5 methods of attacking, fist_combat - fist,
    -- fans_combat_slash - war fans, 
    -- claw_Combat_Slash - claws, 
    -- Scythe_Combat_Slash - scythe, 
    -- Sword_Combat_Slash - sword.
    
    -- // locals
    local ReplStorage = game:GetService("ReplicatedStorage") -- não altere
    local Players = game:GetService("Players")
    local client = game:GetService("Players").LocalPlayer
    
    while killaura do -- verifica se está ativo o toggle
        getgenv().dist = 8
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.5)
        getgenv().dist = 30
    wait(1.2) end -- loops.
    else
        getgenv().killaura = false
        end
    end
})
killauraTab:CreateToggle({
    Name = "Fans",
    Callback = function (bool)
        if bool then
            getgenv().killaura = true -- an toggle, set false if u wanna disable, and true if u wanna enable.
    getgenv().method = "fans_combat_slash" 
    -- theres 5 methods of attacking, fist_combat - fist,
    -- fans_combat_slash - war fans, 
    -- claw_Combat_Slash - claws, 
    -- Scythe_Combat_Slash - scythe, 
    -- Sword_Combat_Slash - sword.
    
    -- // locals
    local ReplStorage = game:GetService("ReplicatedStorage") -- não altere
    local Players = game:GetService("Players")
    local client = game:GetService("Players").LocalPlayer
    
    while killaura do -- verifica se está ativo o toggle
        getgenv().dist = 8
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.5)
        getgenv().dist = 30
    wait(1.2) end -- loops.
    else
        getgenv().killaura = false
        end
    end
})
killauraTab:CreateToggle({
    Name = "Scythe",
    Callback = function (bool)
        if bool then
            getgenv().killaura = true -- an toggle, set false if u wanna disable, and true if u wanna enable.
    getgenv().method = "Scythe_Combat_Slash" 
    -- theres 5 methods of attacking, fist_combat - fist,
    -- fans_combat_slash - war fans, 
    -- claw_Combat_Slash - claws, 
    -- Scythe_Combat_Slash - scythe, 
    -- Sword_Combat_Slash - sword.
    
    -- // locals
    local ReplStorage = game:GetService("ReplicatedStorage") -- não altere
    local Players = game:GetService("Players")
    local client = game:GetService("Players").LocalPlayer
    
    while killaura do -- verifica se está ativo o toggle
        getgenv().dist = 8
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.5)
        getgenv().dist = 30
    wait(1.2) end -- loops.
    else
        getgenv().killaura = false
        end
    end
})
killauraTab:CreateToggle({
    Name = "Claw",
    Callback = function (bool)
        if bool then
            getgenv().killaura = true -- an toggle, set false if u wanna disable, and true if u wanna enable.
    getgenv().method = "claw_Combat_Slash" 
    -- theres 5 methods of attacking, fist_combat - fist,
    -- fans_combat_slash - war fans, 
    -- claw_Combat_Slash - claws, 
    -- Scythe_Combat_Slash - scythe, 
    -- Sword_Combat_Slash - sword.
    
    -- // locals
    local ReplStorage = game:GetService("ReplicatedStorage") -- não altere
    local Players = game:GetService("Players")
    local client = game:GetService("Players").LocalPlayer
    
    while killaura do -- verifica se está ativo o toggle
        getgenv().dist = 8
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, 919, "ground_slash")
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, client, client.Character, client.Character.HumanoidRootPart, client.Character.Humanoid, math.huge, "ground_slash")
        wait(0.5)
        getgenv().dist = 30
    wait(1.2) end -- loops.
    else
        getgenv().killaura = false
        end
    end
})

Teleports1:CreateButton({
    Name = "Muzan",
    Callback = function ()
        local Muzan = game:GetService("Workspace").Muzan
local SpawnPosition = Muzan.SpawnPos.Value
        LP.Character.HumanoidRootPart.CFrame = CFrame.new(SpawnPosition) 
    end
})

Teleports1:CreateButton({
    Name = "Zapiwara Mountain",
    Callback = function ()
        LP.Character.HumanoidRootPart.CFrame = CFrame.new(-365.617981, 425.857422, -2303.92285, -0.351566792, -6.70503529e-13, 0.93616277, 9.77098068e-13, 1, 1.08316502e-12, -0.93616277, 1.2955277e-12, -0.351566792) 
    end
})
    Teleports1:CreateButton({
        Name = "Meditate",
        Callback = function ()
            LP.Character.HumanoidRootPart.CFrame = CFrame.new(2814.46948, 317.022034, -3861.58765, 0.414847195, 0, -0.909891069, 0, 1, 0, 0.909891069, 0, 0.414847195)
        end
})

Teleports1:CreateButton({
    Name = "Split Bouder",
    Callback = function ()
        LP.Character.HumanoidRootPart.CFrame = CFrame.new(919.366699, 275.050903, -3040.896, 0.991291702, 0, 0.131684288, 0, 1, 0, -0.131684288, 0, 0.991291702)
    end
})

Teleports1:CreateButton({
    Name = "Waroru Cave",
    Callback = function ()
        LP.Character.HumanoidRootPart.CFrame = CFrame.new(683.164062, 261.426819, -2401.41797, 0.137014925, -3.46316149e-08, 0.990568995, 6.38769482e-09, 1, 3.4077793e-08, -0.990568995, 1.65828595e-09, 0.137014925)
    end
})
Teleports1:CreateButton({
    Name = "Ushumaru Village",
    Callback = function ()
        LP.Character.HumanoidRootPart.CFrame = CFrame.new(-90.0373688, 354.723511, -3170.00439, 0.817297578, -1.0121405e-08, 0.576215804, 3.12666586e-08, 1, -2.6782951e-08, -0.576215804, 3.99059843e-08, 0.817297578)
    end
})
Teleports1:CreateButton({
    Name = "Ouwbayashi Home",
    Callback = function ()
        LP.Character.HumanoidRootPart.CFrame = CFrame.new(1593.49072, 315.983917, -4618.15088, -0.795035839, -1.09234e-08, -0.606562734, 1.19429622e-09, 1, -1.95740828e-08, 0.606562734, -1.62865081e-08, -0.795035839)
    end
})
Teleports1:CreateButton({
    Name = "Kabiwaru Village",
    Callback = function ()
        LP.Character.HumanoidRootPart.CFrame = CFrame.new(2037.20203, 315.908813, -2956.77539, -0.795035839, -1.09234e-08, -0.606562734, 1.19429622e-09, 1, -1.95740828e-08, 0.606562734, -1.62865081e-08, -0.795035839)
    end
})
Teleports1:CreateButton({
    Name = "Zapiwara Cave",
    Callback = function ()
        LP.Character.HumanoidRootPart.CFrame = CFrame.new(-8.2838707, 275.944641, -2414.72607, -0.795035779, -1.09233964e-08, -0.606562555, 1.19429289e-09, 1, -1.95740775e-08, 0.606562555, -1.62865046e-08, -0.795035779)
    end
})
Teleports1:CreateButton({
    Name = "Dangerous Woods",
    Callback = function ()
        LP.Character.HumanoidRootPart.CFrame = CFrame.new(4061.43677, 342.289581, -3928.90332, -0.795035839, -1.09233973e-08, -0.606562614, 1.19429444e-09, 1, -1.95740775e-08, 0.606562614, -1.62865064e-08, -0.795035839)
    end
})
Teleports1:CreateButton({
    Name = "Final Selection",
    Callback = function ()
        LP.Character.HumanoidRootPart.CFrame = CFrame.new(5200.76709, 365.949982, -2425.61646, -0.795035779, -1.09233964e-08, -0.606562555, 1.19429289e-09, 1, -1.95740775e-08, 0.606562555, -1.62865046e-08, -0.795035779)
    end
})
Teleports1:CreateButton({
    Name = "Kiribating Village",
    Callback = function ()
        LP.Character.HumanoidRootPart.CFrame = CFrame.new(-40.3280869, 282.282745, -1623.75159, -0.795035839, -1.09233991e-08, -0.606562614, 1.19429266e-09, 1, -1.95740792e-08, 0.606562614, -1.62865046e-08, -0.795035839)
    end
})
Teleports1:CreateButton({
    Name = "Butterfly Mansion",
    Callback = function ()
        LP.Character.HumanoidRootPart.CFrame = CFrame.new(3022.90869, 316.075623, -3928.17261, -0.795035779, -1.09233982e-08, -0.606562555, 1.19429144e-09, 1, -1.95740775e-08, 0.606562555, -1.62865046e-08, -0.795035779)
    end
})
Teleports1:CreateButton({
    Name = "Abubu Cave",
    Callback = function ()
        LP.Character.HumanoidRootPart.CFrame = CFrame.new(1044.44873, 276.190704, -3483.0647, -0.795035839, -1.09233991e-08, -0.606562614, 1.19429266e-09, 1, -1.95740792e-08, 0.606562614, -1.62865046e-08, -0.795035839)
    end
})
Teleports1:CreateButton({
    Name = "Water Trainer",
    Callback = function ()
        LP.Character.HumanoidRootPart.CFrame = CFrame.new(705.209229, 261.426819, -2409.51587, -0.566798735, -5.48522401e-08, -0.641887605, -7.38932258e-08, 1, 2.8182352e-09, 0.641887605, 4.95921633e-08, -0.566798735)
    end
})
Teleports1:CreateButton({
    Name = "Insect Trainer",
    Callback = function ()
        LP.Character.HumanoidRootPart.CFrame = CFrame.new(2873.81177, 316.95871, -3917.9397, 0.40715313, 4.81208531e-08, 0.91335988, -8.85969982e-08, 1, -1.31911939e-08, -0.91335988, -7.55501048e-08, 0.40715313)
    end
})
Teleports1:CreateButton({
    Name = "Thunder Trainer",
    Callback = function ()
        LP.Character.HumanoidRootPart.CFrame = CFrame.new(-322.369507, 426.857788, -2384.4021, 0.361198723, -4.49157973e-08, -0.932488859, 1.14233451e-07, 1, -3.91942434e-09, 0.932488859, -1.05105727e-07, 0.361198723)
    end
})

Teleports1:CreateButton({
    Name = "Wind Trainer",
    Callback = function ()
        LP.Character.HumanoidRootPart.CFrame = CFrame.new(1792.31458, 334.338989, -3521.31104, 0.862527311, -5.19402583e-08, -0.506010473, 8.30083167e-08, 1, 3.88463874e-08, 0.506010473, -7.55091492e-08, 0.862527311)
    end
})

Teleports1:CreateButton({
    Name = "BackRooms",
    Callback = function ()
        local player = game.Players.LocalPlayer
if player then
    player.Character.HumanoidRootPart.CFrame = CFrame.new(0, getgenv().Distance, 0) * CFrame.Angles(math.rad(-90), 0, 0)
end
    end
})

Teleports1:CreateButton({
    Name = "TP Muzan",
    Callback = function ()
        local RunService = game:GetService("RunService")
    local Players = game:GetService("Players")
    local Player = Players.LocalPlayer
    local Character = Player.Character
    local HumanoidRootPart = Character.HumanoidRootPart
    
    local Muzan = game:GetService("Workspace").Muzan
    
    local TeleportSpeed = 250
    local NextFrame = RunService.Heartbeat
    
    local function ImprovedTeleport(Target)
        if typeof(Target) == "Instance" and Target:IsA("BasePart") then
            Target = Target.Position
        elseif typeof(Target) == "CFrame" then
            Target = Target.Position
        end
    
        local StartingPosition = HumanoidRootPart.Position
        local PositionDelta = Target - StartingPosition
        local StartTime = tick()
        local TotalDuration = PositionDelta.Magnitude / TeleportSpeed
    
        repeat
            NextFrame:Wait()
            local Delta = tick() - StartTime
            local Progress = math.min(Delta / TotalDuration, 1)
            local MappedPosition = StartingPosition + PositionDelta * Progress
            HumanoidRootPart.Velocity = Vector3.new()
            HumanoidRootPart.CFrame = CFrame.new(MappedPosition)
        until (HumanoidRootPart.Position - Target).Magnitude <= TeleportSpeed / 2
    
        HumanoidRootPart.Anchored = false
        HumanoidRootPart.CFrame = CFrame.new(Target)
    end
    
    ImprovedTeleport(Muzan.SpawnPos.Value)
    end
})

TeleportTween1:CreateButton({
    Name = "Zapiwara Mountain",
    Callback = function ()
        local RunService = game:GetService("RunService")
        local Players = game:GetService("Players")
        local Player = Players.LocalPlayer
        local Character = Player.Character
        local HumanoidRootPart = Character.HumanoidRootPart

        local TeleportSpeed = 250
        local NextFrame = RunService.Heartbeat

        local function ImprovedTeleport(Target)
            if typeof(Target) == "Instance" and Target:IsA("BasePart") then
                Target = Target.Position
            elseif typeof(Target) == "CFrame" then
                Target = Target.Position
            end

            local StartingPosition = HumanoidRootPart.Position
            local PositionDelta = Target - StartingPosition
            local StartTime = tick()
            local TotalDuration = PositionDelta.Magnitude / TeleportSpeed

            repeat
                NextFrame:Wait()
                local Delta = tick() - StartTime
                local Progress = math.min(Delta / TotalDuration, 1)
                local MappedPosition = StartingPosition + PositionDelta * Progress
                HumanoidRootPart.Velocity = Vector3.new()
                HumanoidRootPart.CFrame = CFrame.new(MappedPosition)
            until (HumanoidRootPart.Position - Target).Magnitude <= TeleportSpeed / 2

            HumanoidRootPart.Anchored = false
            HumanoidRootPart.CFrame = CFrame.new(Target)
        end

        local targetPosition = Vector3.new(-365.617981, 425.857422, -2303.92285)

        ImprovedTeleport(targetPosition)
    end
})

TeleportTween1:CreateButton({
    Name = "Split Bouder",
    Callback = function ()
        local RunService = game:GetService("RunService")
        local Players = game:GetService("Players")
        local Player = Players.LocalPlayer
        local Character = Player.Character
        local HumanoidRootPart = Character.HumanoidRootPart

        local TeleportSpeed = 250
        local NextFrame = RunService.Heartbeat

        local function ImprovedTeleport(Target)
            if typeof(Target) == "Instance" and Target:IsA("BasePart") then
                Target = Target.Position
            elseif typeof(Target) == "CFrame" then
                Target = Target.Position
            end

            local StartingPosition = HumanoidRootPart.Position
            local PositionDelta = Target - StartingPosition
            local StartTime = tick()
            local TotalDuration = PositionDelta.Magnitude / TeleportSpeed

            repeat
                NextFrame:Wait()
                local Delta = tick() - StartTime
                local Progress = math.min(Delta / TotalDuration, 1)
                local MappedPosition = StartingPosition + PositionDelta * Progress
                HumanoidRootPart.Velocity = Vector3.new()
                HumanoidRootPart.CFrame = CFrame.new(MappedPosition)
            until (HumanoidRootPart.Position - Target).Magnitude <= TeleportSpeed / 2

            HumanoidRootPart.Anchored = false
            HumanoidRootPart.CFrame = CFrame.new(Target)
        end

        local targetPosition = Vector3.new(919.366699, 275.050903, -3040.896)

        ImprovedTeleport(targetPosition)
    end
})

TeleportTween1:CreateButton({
    Name = "Meditate",
    Callback = function ()
        local RunService = game:GetService("RunService")
        local Players = game:GetService("Players")
        local Player = Players.LocalPlayer
        local Character = Player.Character
        local HumanoidRootPart = Character.HumanoidRootPart

        local TeleportSpeed = 250
        local NextFrame = RunService.Heartbeat

        local function ImprovedTeleport(Target)
            if typeof(Target) == "Instance" and Target:IsA("BasePart") then
                Target = Target.Position
            elseif typeof(Target) == "CFrame" then
                Target = Target.Position
            end

            local StartingPosition = HumanoidRootPart.Position
            local PositionDelta = Target - StartingPosition
            local StartTime = tick()
            local TotalDuration = PositionDelta.Magnitude / TeleportSpeed

            repeat
                NextFrame:Wait()
                local Delta = tick() - StartTime
                local Progress = math.min(Delta / TotalDuration, 1)
                local MappedPosition = StartingPosition + PositionDelta * Progress
                HumanoidRootPart.Velocity = Vector3.new()
                HumanoidRootPart.CFrame = CFrame.new(MappedPosition)
            until (HumanoidRootPart.Position - Target).Magnitude <= TeleportSpeed / 2

            HumanoidRootPart.Anchored = false
            HumanoidRootPart.CFrame = CFrame.new(Target)
        end

        local targetPosition = Vector3.new(2814.46948, 317.022034, -3861.58765)

        ImprovedTeleport(targetPosition)
    end
})

TeleportTween1:CreateButton({
    Name = "Waroru Cave",
    Callback = function ()
        local RunService = game:GetService("RunService")
        local Players = game:GetService("Players")
        local Player = Players.LocalPlayer
        local Character = Player.Character
        local HumanoidRootPart = Character.HumanoidRootPart

        local TeleportSpeed = 250
        local NextFrame = RunService.Heartbeat

        local function ImprovedTeleport(Target)
            if typeof(Target) == "Instance" and Target:IsA("BasePart") then
                Target = Target.Position
            elseif typeof(Target) == "CFrame" then
                Target = Target.Position
            end

            local StartingPosition = HumanoidRootPart.Position
            local PositionDelta = Target - StartingPosition
            local StartTime = tick()
            local TotalDuration = PositionDelta.Magnitude / TeleportSpeed

            repeat
                NextFrame:Wait()
                local Delta = tick() - StartTime
                local Progress = math.min(Delta / TotalDuration, 1)
                local MappedPosition = StartingPosition + PositionDelta * Progress
                HumanoidRootPart.Velocity = Vector3.new()
                HumanoidRootPart.CFrame = CFrame.new(MappedPosition)
            until (HumanoidRootPart.Position - Target).Magnitude <= TeleportSpeed / 2

            HumanoidRootPart.Anchored = false
            HumanoidRootPart.CFrame = CFrame.new(Target)
        end

        local targetPosition = Vector3.new(683.164062, 261.426819, -2401.41797)

        ImprovedTeleport(targetPosition)
    end
})

TeleportTween1:CreateButton({
    Name = "Ushumaru Village",
    Callback = function ()
        local RunService = game:GetService("RunService")
        local Players = game:GetService("Players")
        local Player = Players.LocalPlayer
        local Character = Player.Character
        local HumanoidRootPart = Character.HumanoidRootPart

        local TeleportSpeed = 250
        local NextFrame = RunService.Heartbeat

        local function ImprovedTeleport(Target)
            if typeof(Target) == "Instance" and Target:IsA("BasePart") then
                Target = Target.Position
            elseif typeof(Target) == "CFrame" then
                Target = Target.Position
            end

            local StartingPosition = HumanoidRootPart.Position
            local PositionDelta = Target - StartingPosition
            local StartTime = tick()
            local TotalDuration = PositionDelta.Magnitude / TeleportSpeed

            repeat
                NextFrame:Wait()
                local Delta = tick() - StartTime
                local Progress = math.min(Delta / TotalDuration, 1)
                local MappedPosition = StartingPosition + PositionDelta * Progress
                HumanoidRootPart.Velocity = Vector3.new()
                HumanoidRootPart.CFrame = CFrame.new(MappedPosition)
            until (HumanoidRootPart.Position - Target).Magnitude <= TeleportSpeed / 2

            HumanoidRootPart.Anchored = false
            HumanoidRootPart.CFrame = CFrame.new(Target)
        end

        local targetPosition = Vector3.new(-90.0373688, 354.723511, -3170.00439)

        ImprovedTeleport(targetPosition)
    end
})

TeleportTween1:CreateButton({
    Name = "Ouwbayashi Home",
    Callback = function ()
        local RunService = game:GetService("RunService")
        local Players = game:GetService("Players")
        local Player = Players.LocalPlayer
        local Character = Player.Character
        local HumanoidRootPart = Character.HumanoidRootPart

        local TeleportSpeed = 250
        local NextFrame = RunService.Heartbeat

        local function ImprovedTeleport(Target)
            if typeof(Target) == "Instance" and Target:IsA("BasePart") then
                Target = Target.Position
            elseif typeof(Target) == "CFrame" then
                Target = Target.Position
            end

            local StartingPosition = HumanoidRootPart.Position
            local PositionDelta = Target - StartingPosition
            local StartTime = tick()
            local TotalDuration = PositionDelta.Magnitude / TeleportSpeed

            repeat
                NextFrame:Wait()
                local Delta = tick() - StartTime
                local Progress = math.min(Delta / TotalDuration, 1)
                local MappedPosition = StartingPosition + PositionDelta * Progress
                HumanoidRootPart.Velocity = Vector3.new()
                HumanoidRootPart.CFrame = CFrame.new(MappedPosition)
            until (HumanoidRootPart.Position - Target).Magnitude <= TeleportSpeed / 2

            HumanoidRootPart.Anchored = false
            HumanoidRootPart.CFrame = CFrame.new(Target)
        end

        local targetPosition = Vector3.new(1593.49072, 315.983917, -4618.15088, -0.795035839)

        ImprovedTeleport(targetPosition)
    end
})

TeleportTween1:CreateButton({
    Name = "Kabiwaru Village",
    Callback = function ()
        local RunService = game:GetService("RunService")
        local Players = game:GetService("Players")
        local Player = Players.LocalPlayer
        local Character = Player.Character
        local HumanoidRootPart = Character.HumanoidRootPart

        local TeleportSpeed = 250
        local NextFrame = RunService.Heartbeat

        local function ImprovedTeleport(Target)
            if typeof(Target) == "Instance" and Target:IsA("BasePart") then
                Target = Target.Position
            elseif typeof(Target) == "CFrame" then
                Target = Target.Position
            end

            local StartingPosition = HumanoidRootPart.Position
            local PositionDelta = Target - StartingPosition
            local StartTime = tick()
            local TotalDuration = PositionDelta.Magnitude / TeleportSpeed

            repeat
                NextFrame:Wait()
                local Delta = tick() - StartTime
                local Progress = math.min(Delta / TotalDuration, 1)
                local MappedPosition = StartingPosition + PositionDelta * Progress
                HumanoidRootPart.Velocity = Vector3.new()
                HumanoidRootPart.CFrame = CFrame.new(MappedPosition)
            until (HumanoidRootPart.Position - Target).Magnitude <= TeleportSpeed / 2

            HumanoidRootPart.Anchored = false
            HumanoidRootPart.CFrame = CFrame.new(Target)
        end

        local targetPosition = Vector3.new(2037.20203, 315.908813, -2956.77539)

        ImprovedTeleport(targetPosition)
    end
})

TeleportTween1:CreateButton({
    Name = "Zapiwara Cave",
    Callback = function ()
        local RunService = game:GetService("RunService")
        local Players = game:GetService("Players")
        local Player = Players.LocalPlayer
        local Character = Player.Character
        local HumanoidRootPart = Character.HumanoidRootPart

        local TeleportSpeed = 250
        local NextFrame = RunService.Heartbeat

        local function ImprovedTeleport(Target)
            if typeof(Target) == "Instance" and Target:IsA("BasePart") then
                Target = Target.Position
            elseif typeof(Target) == "CFrame" then
                Target = Target.Position
            end

            local StartingPosition = HumanoidRootPart.Position
            local PositionDelta = Target - StartingPosition
            local StartTime = tick()
            local TotalDuration = PositionDelta.Magnitude / TeleportSpeed

            repeat
                NextFrame:Wait()
                local Delta = tick() - StartTime
                local Progress = math.min(Delta / TotalDuration, 1)
                local MappedPosition = StartingPosition + PositionDelta * Progress
                HumanoidRootPart.Velocity = Vector3.new()
                HumanoidRootPart.CFrame = CFrame.new(MappedPosition)
            until (HumanoidRootPart.Position - Target).Magnitude <= TeleportSpeed / 2

            HumanoidRootPart.Anchored = false
            HumanoidRootPart.CFrame = CFrame.new(Target)
        end

        local targetPosition = Vector3.new(-8.2838707, 275.944641, -2414.72607)

        ImprovedTeleport(targetPosition)
    end
})

TeleportTween1:CreateButton({
    Name = "Dangerous Woods",
    Callback = function ()
        local RunService = game:GetService("RunService")
        local Players = game:GetService("Players")
        local Player = Players.LocalPlayer
        local Character = Player.Character
        local HumanoidRootPart = Character.HumanoidRootPart

        local TeleportSpeed = 250
        local NextFrame = RunService.Heartbeat

        local function ImprovedTeleport(Target)
            if typeof(Target) == "Instance" and Target:IsA("BasePart") then
                Target = Target.Position
            elseif typeof(Target) == "CFrame" then
                Target = Target.Position
            end

            local StartingPosition = HumanoidRootPart.Position
            local PositionDelta = Target - StartingPosition
            local StartTime = tick()
            local TotalDuration = PositionDelta.Magnitude / TeleportSpeed

            repeat
                NextFrame:Wait()
                local Delta = tick() - StartTime
                local Progress = math.min(Delta / TotalDuration, 1)
                local MappedPosition = StartingPosition + PositionDelta * Progress
                HumanoidRootPart.Velocity = Vector3.new()
                HumanoidRootPart.CFrame = CFrame.new(MappedPosition)
            until (HumanoidRootPart.Position - Target).Magnitude <= TeleportSpeed / 2

            HumanoidRootPart.Anchored = false
            HumanoidRootPart.CFrame = CFrame.new(Target)
        end

        local targetPosition = Vector3.new(4061.43677, 342.289581, -3928.90332)

        ImprovedTeleport(targetPosition)
    end
})

TeleportTween1:CreateButton({
    Name = "Final Selection",
    Callback = function ()
        local RunService = game:GetService("RunService")
        local Players = game:GetService("Players")
        local Player = Players.LocalPlayer
        local Character = Player.Character
        local HumanoidRootPart = Character.HumanoidRootPart

        local TeleportSpeed = 250
        local NextFrame = RunService.Heartbeat

        local function ImprovedTeleport(Target)
            if typeof(Target) == "Instance" and Target:IsA("BasePart") then
                Target = Target.Position
            elseif typeof(Target) == "CFrame" then
                Target = Target.Position
            end

            local StartingPosition = HumanoidRootPart.Position
            local PositionDelta = Target - StartingPosition
            local StartTime = tick()
            local TotalDuration = PositionDelta.Magnitude / TeleportSpeed

            repeat
                NextFrame:Wait()
                local Delta = tick() - StartTime
                local Progress = math.min(Delta / TotalDuration, 1)
                local MappedPosition = StartingPosition + PositionDelta * Progress
                HumanoidRootPart.Velocity = Vector3.new()
                HumanoidRootPart.CFrame = CFrame.new(MappedPosition)
            until (HumanoidRootPart.Position - Target).Magnitude <= TeleportSpeed / 2

            HumanoidRootPart.Anchored = false
            HumanoidRootPart.CFrame = CFrame.new(Target)
        end

        local targetPosition = Vector3.new(5200.76709, 365.949982, -2425.61646)

        ImprovedTeleport(targetPosition)
    end
})

TeleportTween1:CreateButton({
    Name = "Kiribating Village",
    Callback = function ()
        local RunService = game:GetService("RunService")
        local Players = game:GetService("Players")
        local Player = Players.LocalPlayer
        local Character = Player.Character
        local HumanoidRootPart = Character.HumanoidRootPart

        local TeleportSpeed = 250
        local NextFrame = RunService.Heartbeat

        local function ImprovedTeleport(Target)
            if typeof(Target) == "Instance" and Target:IsA("BasePart") then
                Target = Target.Position
            elseif typeof(Target) == "CFrame" then
                Target = Target.Position
            end

            local StartingPosition = HumanoidRootPart.Position
            local PositionDelta = Target - StartingPosition
            local StartTime = tick()
            local TotalDuration = PositionDelta.Magnitude / TeleportSpeed

            repeat
                NextFrame:Wait()
                local Delta = tick() - StartTime
                local Progress = math.min(Delta / TotalDuration, 1)
                local MappedPosition = StartingPosition + PositionDelta * Progress
                HumanoidRootPart.Velocity = Vector3.new()
                HumanoidRootPart.CFrame = CFrame.new(MappedPosition)
            until (HumanoidRootPart.Position - Target).Magnitude <= TeleportSpeed / 2

            HumanoidRootPart.Anchored = false
            HumanoidRootPart.CFrame = CFrame.new(Target)
        end

        local targetPosition = Vector3.new(-40.3280869, 282.282745, -1623.75159)

        ImprovedTeleport(targetPosition)
    end
})

TeleportTween1:CreateButton({
    Name = "Butterfly Mansion",
    Callback = function ()
        local RunService = game:GetService("RunService")
        local Players = game:GetService("Players")
        local Player = Players.LocalPlayer
        local Character = Player.Character
        local HumanoidRootPart = Character.HumanoidRootPart

        local TeleportSpeed = 250
        local NextFrame = RunService.Heartbeat

        local function ImprovedTeleport(Target)
            if typeof(Target) == "Instance" and Target:IsA("BasePart") then
                Target = Target.Position
            elseif typeof(Target) == "CFrame" then
                Target = Target.Position
            end

            local StartingPosition = HumanoidRootPart.Position
            local PositionDelta = Target - StartingPosition
            local StartTime = tick()
            local TotalDuration = PositionDelta.Magnitude / TeleportSpeed

            repeat
                NextFrame:Wait()
                local Delta = tick() - StartTime
                local Progress = math.min(Delta / TotalDuration, 1)
                local MappedPosition = StartingPosition + PositionDelta * Progress
                HumanoidRootPart.Velocity = Vector3.new()
                HumanoidRootPart.CFrame = CFrame.new(MappedPosition)
            until (HumanoidRootPart.Position - Target).Magnitude <= TeleportSpeed / 2

            HumanoidRootPart.Anchored = false
            HumanoidRootPart.CFrame = CFrame.new(Target)
        end

        local targetPosition = Vector3.new(3022.90869, 316.075623, -3928.17261)

        ImprovedTeleport(targetPosition)
    end
})

TeleportTween1:CreateButton({
    Name = "Abubu Cave",
    Callback = function ()
        local RunService = game:GetService("RunService")
        local Players = game:GetService("Players")
        local Player = Players.LocalPlayer
        local Character = Player.Character
        local HumanoidRootPart = Character.HumanoidRootPart

        local TeleportSpeed = 250
        local NextFrame = RunService.Heartbeat

        local function ImprovedTeleport(Target)
            if typeof(Target) == "Instance" and Target:IsA("BasePart") then
                Target = Target.Position
            elseif typeof(Target) == "CFrame" then
                Target = Target.Position
            end

            local StartingPosition = HumanoidRootPart.Position
            local PositionDelta = Target - StartingPosition
            local StartTime = tick()
            local TotalDuration = PositionDelta.Magnitude / TeleportSpeed

            repeat
                NextFrame:Wait()
                local Delta = tick() - StartTime
                local Progress = math.min(Delta / TotalDuration, 1)
                local MappedPosition = StartingPosition + PositionDelta * Progress
                HumanoidRootPart.Velocity = Vector3.new()
                HumanoidRootPart.CFrame = CFrame.new(MappedPosition)
            until (HumanoidRootPart.Position - Target).Magnitude <= TeleportSpeed / 2

            HumanoidRootPart.Anchored = false
            HumanoidRootPart.CFrame = CFrame.new(Target)
        end

        local targetPosition = Vector3.new(1044.44873, 276.190704, -3483.0647)

        ImprovedTeleport(targetPosition)
    end
})

TeleportTween1:CreateButton({
    Name = "Water Trainer",
    Callback = function ()
        local RunService = game:GetService("RunService")
        local Players = game:GetService("Players")
        local Player = Players.LocalPlayer
        local Character = Player.Character
        local HumanoidRootPart = Character.HumanoidRootPart

        local TeleportSpeed = 250
        local NextFrame = RunService.Heartbeat

        local function ImprovedTeleport(Target)
            if typeof(Target) == "Instance" and Target:IsA("BasePart") then
                Target = Target.Position
            elseif typeof(Target) == "CFrame" then
                Target = Target.Position
            end

            local StartingPosition = HumanoidRootPart.Position
            local PositionDelta = Target - StartingPosition
            local StartTime = tick()
            local TotalDuration = PositionDelta.Magnitude / TeleportSpeed

            repeat
                NextFrame:Wait()
                local Delta = tick() - StartTime
                local Progress = math.min(Delta / TotalDuration, 1)
                local MappedPosition = StartingPosition + PositionDelta * Progress
                HumanoidRootPart.Velocity = Vector3.new()
                HumanoidRootPart.CFrame = CFrame.new(MappedPosition)
            until (HumanoidRootPart.Position - Target).Magnitude <= TeleportSpeed / 2

            HumanoidRootPart.Anchored = false
            HumanoidRootPart.CFrame = CFrame.new(Target)
        end

        local targetPosition = Vector3.new(705.209229, 261.426819, -2409.51587)

        ImprovedTeleport(targetPosition)
    end
})

TeleportTween1:CreateButton({
    Name = "Insect Trainer",
    Callback = function ()
        local RunService = game:GetService("RunService")
        local Players = game:GetService("Players")
        local Player = Players.LocalPlayer
        local Character = Player.Character
        local HumanoidRootPart = Character.HumanoidRootPart

        local TeleportSpeed = 250
        local NextFrame = RunService.Heartbeat

        local function ImprovedTeleport(Target)
            if typeof(Target) == "Instance" and Target:IsA("BasePart") then
                Target = Target.Position
            elseif typeof(Target) == "CFrame" then
                Target = Target.Position
            end

            local StartingPosition = HumanoidRootPart.Position
            local PositionDelta = Target - StartingPosition
            local StartTime = tick()
            local TotalDuration = PositionDelta.Magnitude / TeleportSpeed

            repeat
                NextFrame:Wait()
                local Delta = tick() - StartTime
                local Progress = math.min(Delta / TotalDuration, 1)
                local MappedPosition = StartingPosition + PositionDelta * Progress
                HumanoidRootPart.Velocity = Vector3.new()
                HumanoidRootPart.CFrame = CFrame.new(MappedPosition)
            until (HumanoidRootPart.Position - Target).Magnitude <= TeleportSpeed / 2

            HumanoidRootPart.Anchored = false
            HumanoidRootPart.CFrame = CFrame.new(Target)
        end

        local targetPosition = Vector3.new(2873.81177, 316.95871, -3917.9397)

        ImprovedTeleport(targetPosition)
    end
})

TeleportTween1:CreateButton({
    Name = "Thunder Trainer",
    Callback = function ()
        local RunService = game:GetService("RunService")
        local Players = game:GetService("Players")
        local Player = Players.LocalPlayer
        local Character = Player.Character
        local HumanoidRootPart = Character.HumanoidRootPart

        local TeleportSpeed = 250
        local NextFrame = RunService.Heartbeat

        local function ImprovedTeleport(Target)
            if typeof(Target) == "Instance" and Target:IsA("BasePart") then
                Target = Target.Position
            elseif typeof(Target) == "CFrame" then
                Target = Target.Position
            end

            local StartingPosition = HumanoidRootPart.Position
            local PositionDelta = Target - StartingPosition
            local StartTime = tick()
            local TotalDuration = PositionDelta.Magnitude / TeleportSpeed

            repeat
                NextFrame:Wait()
                local Delta = tick() - StartTime
                local Progress = math.min(Delta / TotalDuration, 1)
                local MappedPosition = StartingPosition + PositionDelta * Progress
                HumanoidRootPart.Velocity = Vector3.new()
                HumanoidRootPart.CFrame = CFrame.new(MappedPosition)
            until (HumanoidRootPart.Position - Target).Magnitude <= TeleportSpeed / 2

            HumanoidRootPart.Anchored = false
            HumanoidRootPart.CFrame = CFrame.new(Target)
        end

        local targetPosition = Vector3.new(-322.369507, 426.857788, -2384.4021)

        ImprovedTeleport(targetPosition)
    end
})

TeleportTween1:CreateButton({
    Name = "Wind Trainer",
    Callback = function ()
        local RunService = game:GetService("RunService")
        local Players = game:GetService("Players")
        local Player = Players.LocalPlayer
        local Character = Player.Character
        local HumanoidRootPart = Character.HumanoidRootPart

        local TeleportSpeed = 250
        local NextFrame = RunService.Heartbeat

        local function ImprovedTeleport(Target)
            if typeof(Target) == "Instance" and Target:IsA("BasePart") then
                Target = Target.Position
            elseif typeof(Target) == "CFrame" then
                Target = Target.Position
            end

            local StartingPosition = HumanoidRootPart.Position
            local PositionDelta = Target - StartingPosition
            local StartTime = tick()
            local TotalDuration = PositionDelta.Magnitude / TeleportSpeed

            repeat
                NextFrame:Wait()
                local Delta = tick() - StartTime
                local Progress = math.min(Delta / TotalDuration, 1)
                local MappedPosition = StartingPosition + PositionDelta * Progress
                HumanoidRootPart.Velocity = Vector3.new()
                HumanoidRootPart.CFrame = CFrame.new(MappedPosition)
            until (HumanoidRootPart.Position - Target).Magnitude <= TeleportSpeed / 2

            HumanoidRootPart.Anchored = false
            HumanoidRootPart.CFrame = CFrame.new(Target)
        end

        local targetPosition = Vector3.new(1792.31458, 334.338989, -3521.31104)

        ImprovedTeleport(targetPosition)
    end
})

TeleportTween1:CreateButton({
    Name = "BackRooms",
    Callback = function ()
        local RunService = game:GetService("RunService")
        local Players = game:GetService("Players")
        local Player = Players.LocalPlayer
        local Character = Player.Character
        local HumanoidRootPart = Character.HumanoidRootPart

        local TeleportSpeed = 250
        local NextFrame = RunService.Heartbeat

        local function ImprovedTeleport(Target)
            if typeof(Target) == "Instance" and Target:IsA("BasePart") then
                Target = Target.Position
            elseif typeof(Target) == "CFrame" then
                Target = Target.Position
            end

            local StartingPosition = HumanoidRootPart.Position
            local PositionDelta = Target - StartingPosition
            local StartTime = tick()
            local TotalDuration = PositionDelta.Magnitude / TeleportSpeed

            repeat
                NextFrame:Wait()
                local Delta = tick() - StartTime
                local Progress = math.min(Delta / TotalDuration, 1)
                local MappedPosition = StartingPosition + PositionDelta * Progress
                HumanoidRootPart.Velocity = Vector3.new()
                HumanoidRootPart.CFrame = CFrame.new(MappedPosition)
            until (HumanoidRootPart.Position - Target).Magnitude <= TeleportSpeed / 2

            HumanoidRootPart.Anchored = false
            HumanoidRootPart.CFrame = CFrame.new(Target)
        end

        local targetPosition = Vector3.new(-90, 3, 0)

        ImprovedTeleport(targetPosition)
    end
})


Misc:CreateButton({
    Name = "GamePass Unlocker",
    Callback = function()
        local player = game.Players.LocalPlayer

    local gamepass1 = Instance.new("StringValue")
    local gamepass3 = Instance.new("StringValue")
    local gamepass4 = Instance.new("StringValue")
    local gamepass5 = Instance.new("StringValue")
    gamepass1.Name = "18589360"
    gamepass3.Name = "18710993"
    gamepass4.Name = "19241624"
    gamepass5.Name = "46503236"
    gamepass1.Parent = player.gamepasses
    gamepass3.Parent = player.gamepasses
    gamepass4.Parent = player.gamepasses
    gamepass5.Parent = player.gamepasses

    --18589360 = Concentração Total Gamepass Z
    --18710993 = Disable Uniform
    --19241624 = Gourd Durability Viewer Z
    --46503236 = Skip Spin Z

    end
})

local Button = Misc:CreateButton({
    Name = "Anti AFK",
    Callback = function()
        local bb = game:GetService("VirtualUser")
        game:GetService("Players").LocalPlayer.Idled:Connect(function()
            bb:CaptureController()
            bb:ClickButton2(Vector2.new())
        end)
    end,
})

Misc:CreateToggle({
    Name = "AutoCollect",
    Flag = "AutoCollect",
    CurrentValue = false,
    Callback = function(Value)
        getgenv().AutoCollectChest = Value
    end,
})

spawn(function()
    while task.wait() do
        if getgenv().AutoCollectChest then
            for _, v in pairs(game:GetService("Workspace").Debree:GetChildren()) do
                if v.Name == "Loot_Chest" then
                    for _, c in pairs(v:FindFirstChild("Drops"):GetChildren()) do
                        local args = { [1] = c.Name }
                        v["Add_To_Inventory"]:InvokeServer(unpack(args))
                    end
                end
            end
        end
    end
end)

Misc:CreateToggle({
    Name = "Inf Stamina",
    Flag = "Inf Stamina",
    Callback = function (bool)
        if bool then
            if not isRunning then
                isRunning = true
                staminaLoop = coroutine.wrap(function()
                    while isRunning do
                        getrenv()._G:Stamina(-1)
                        task.wait()
                    end
                end)
                staminaLoop()
            end
        else
            if isRunning then
                isRunning = false
            end
        end
    end
})

Misc:CreateToggle({
    Name = "Inf Breathing",
    Flag = "Inf Breathing",
    Callback = function (bool)
        isBreathing = bool
    end
})

spawn(function()
    while wait() do
        if isBreathing then
            getrenv()._G.AddBreath("gpthebest", 50)
        end
    end
end)

local Toggle = Misc:CreateToggle({
    Name = "No Sun Burn",
    CurrentValue = false,
    Callback = function(value)
       if value then
        game:GetService("Players").LocalPlayer.PlayerScripts["Small_Scripts"].Gameplay["Sun_Damage"].Disabled = true
       else
        game:GetService("Players").LocalPlayer.PlayerScripts["Small_Scripts"].Gameplay["Sun_Damage"].Disabled = false
       end
    end,
 })

Misc:CreateToggle({
    Name = "NoCoolDown(DONT SPAM!!)",
    Flag = "NoCoolDown(DONT SPAM!!)",
    Callback = function (bool)
        getgenv().NoCdMoves = bool -- Atualiza o estado da variável NoCdMoves com o valor do toggle

        -- Verifica se a função oldindex já foi definida
        if oldindex then
            return -- Se já foi definida, apenas retorna
        end
    
        -- Define a função original __index como oldindex
        oldindex = hookmetamethod(game, "__index", function(index, value)
            if tostring(index) == "LastUsed" and getgenv().NoCdMoves then
                return 0
            end
            return oldindex(index, value)
        end)
    end
})

local Toggle = Misc:CreateToggle({
    Name = "Auto Meditate",
    CurrentValue = false,
    Callback = function(bool)
        getgenv().AutoMeditate = bool
    end,
})

function exec()
    while wait() do
        if getgenv().AutoMeditate then
            pcall(function()
                game:GetService("Players").LocalPlayer.PlayerGui.ExcessGuis["Meditate_gui"].Holder.LocalScript.Value.Value = 100
            end)
        end
    end
end

spawn(exec)

local Toggle = Misc:CreateToggle({
    Name = "Auto Split",
    CurrentValue = false,
    Callback = function(bool)
       getgenv().AutoSplit = bool
    end,
 })
 
 function exec()
    while task.wait() do
       if getgenv().AutoSplit then
          pcall(function()
             game:GetService("Players").LocalPlayer.PlayerGui.ExcessGuis["boulder_split_ui"].Holder.LocalScript.Value.Value = 10000
          end)
       end
    end
 end
 
 spawn(exec)

 local Toggle = Misc:CreateToggle({
    Name = "No Drown",
    CurrentValue = false,
    Callback = function()
       getgenv().NoDrown = not getgenv().NoDrown
    end,
})
 
task.spawn(function()
    while true do
       for i, v in next, getgc(true) do
          if type(v) == "table" and rawget(v, "swim_bar") then
             if getgenv().NoDrown then
                rawset(v, "swim_bar", {
                   [1] = 2,
                   [2] = 2
                })
             end
          end
       end
       task.wait(6) -- Adiciona um intervalo de espera de 0.1 segundos
    end
end)

local vim = game:GetService('VirtualInputManager')
local rs = game:GetService('RunService')
local clash = false

local function pressKey(key)
    vim:SendKeyEvent(true, key, false, game)
    wait()
    vim:SendKeyEvent(false, key, false, game)
end

local function instanced()
    while clash do
        rs.Heartbeat:Wait(0.3)
        pressKey(Enum.KeyCode[game.Players.LocalPlayer.PlayerGui["universal_client_scripts"].Clashing2["Clash_Ui2"].Holder:WaitForChild('Front').Text])
    end
end

local Toggle = Misc:CreateToggle({
    Name = "AutoClash",
    CurrentValue = false,
    Callback = function(Value)
        clash = Value
        if clash then
            instanced()
        end
    end,
})

CurrentValue = false
 
Misc:CreateLabel("Buffs")

local Button = Misc:CreateButton({
    Name = "Wagon God",
    Callback = function()
        wait(0.2)

        local player = game.Players.LocalPlayer
        player.Character.HumanoidRootPart.CFrame = CFrame.new(222.136902, 281.832642, -1606.17798)

        wait(0.8)

        local player = game:GetService("Players").LocalPlayer

        local ohString1 = "AddQuest"
        local ohString2 = "Players." .. player.Name .. ".PlayerGui.Npc_Dialogue.LocalScript.Functions"
        local ohNumber3 = 18455.7521223
        local ohInstance4 = game:GetService("ReplicatedStorage").Player_Data[player.Name].Quest
        local ohTable5 = {
            ["List"] = {
                [1] = {
                    ["Name"] = "Deliver wagon",
                    ["Progress"] = {
                        [1] = 0,
                        [2] = 1
                    }
                }
            },
            ["Current"] = "Deliver grandpa Wagwon's wagon"
        }

        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(ohString1, ohString2, ohNumber3, ohInstance4, ohTable5)

        wait(0.4)

        local player = game.Players.LocalPlayer
        local wagonName = player.Name .. "'s Wagon"
        local wagon = player.Character:FindFirstChild(wagonName)
        if wagon then
            wagon:Destroy()
        end

        wait(0.2)

        local player = game.Players.LocalPlayer
        local playerGui = player.PlayerGui
        local quest = playerGui.Menu.Quest

        if quest then
            quest:Destroy()
        end
    end,
})

local ToggleSwampyEnabled = false
local ToggleDreamEnabled = false
local ToggleIceEnabled = false
local ToggleSoundEnabled = false
local ToggleShockWaveEnabled = false

local AutoInvincibleSwampy = Misc:CreateToggle({
    Name = "Invincible (Swampy)",
    CurrentValue = false,
    Callback = function(v)
        ToggleSwampyEnabled = v
        
        if ToggleSwampyEnabled then
            ToggleDreamEnabled = false
            ToggleIceEnabled = false
            ToggleSoundEnabled = false
            ToggleShockWaveEnabled = false
            toggleInvincibleSwampy()
        end
    end
})

local AutoInvincibleDream = Misc:CreateToggle({
    Name = "Invincible (Dream)",
    CurrentValue = false,
    Callback = function(v)
        ToggleDreamEnabled = v
        
        if ToggleDreamEnabled then
            ToggleSwampyEnabled = false
            ToggleIceEnabled = false
            ToggleSoundEnabled = false
            ToggleShockWaveEnabled = false
            toggleInvincibleDream()
        end
    end
})

local AutoInvincibleIce = Misc:CreateToggle({
    Name = "Invincible (Ice)",
    CurrentValue = false,
    Callback = function(v)
        ToggleIceEnabled = v
        
        if ToggleIceEnabled then
            ToggleSwampyEnabled = false
            ToggleDreamEnabled = false
            ToggleSoundEnabled = false
            ToggleShockWaveEnabled = false
            toggleInvincibleIce()
        end
    end
})

local AutoInvincibleSound = Misc:CreateToggle({
    Name = "Invincible (Sound)",
    CurrentValue = false,
    Callback = function(v)
        ToggleSoundEnabled = v
        
        if ToggleSoundEnabled then
            ToggleSwampyEnabled = false
            ToggleDreamEnabled = false
            ToggleIceEnabled = false
            ToggleShockWaveEnabled = false
            toggleInvincibleSound()
        end
    end
})

local AutoInvincibleShockWave = Misc:CreateToggle({
    Name = "Invincible (ShockWave)",
    CurrentValue = false,
    Callback = function(v)
        ToggleShockWaveEnabled = v
        
        if ToggleShockWaveEnabled then
            ToggleSwampyEnabled = false
            ToggleDreamEnabled = false
            ToggleIceEnabled = false
            ToggleSoundEnabled = false
            toggleInvincibleShockWave()
        end
    end
})

function toggleInvincibleSwampy()
    while ToggleSwampyEnabled do
        local ohString1 = "skil_ting_asd"
        local ohInstance2 = game:GetService("Players").LocalPlayer
        local ohString3 = "swamp_bda_swamp_domain"
        local ohNumber4 = 1
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(ohString1, ohInstance2, ohString3, ohNumber4)
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(ohString1, ohInstance2, ohString3, ohNumber4)
        task.wait(0.5)
    end
end

function toggleInvincibleDream()
    while ToggleDreamEnabled do
        local args = {
            [1] = "skil_ting_asd",
            [2] = game:GetService("Players").LocalPlayer,
            [3] = "dream_bda_flesh_monster",
            [4] = 1
        }
        game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("To_Server"):WaitForChild("Handle_Initiate_S"):FireServer(unpack(args))
        task.wait(0.5)
    end
end

function toggleInvincibleIce()
    while ToggleIceEnabled do
        local ohString1 = "skil_ting_asd"
        local ohInstance2 = game:GetService("Players").LocalPlayer
        local ohString3 = "ice_demon_art_bodhisatva"
        local ohNumber4 = 1
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(ohString1, ohInstance2, ohString3, ohNumber4)
        task.wait(0.5)
    end
end

function toggleInvincibleSound()
    while ToggleSoundEnabled do
        local ohString1 = "skil_ting_asd"
        local ohInstance2 = game:GetService("Players").LocalPlayer
        local ohString3 = "sound_breathing_smoke_screen"
        local ohNumber4 = 1
        game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(ohString1, ohInstance2, ohString3, ohNumber4)
        task.wait(0.5)
    end
end

function toggleInvincibleShockWave()
    while ToggleShockWaveEnabled do
        local A_1 = "skil_ting_asd"
        local A_2 = game:GetService("Players").LocalPlayer
        local A_3 = "akaza_bda_compass_needle"
        local A_4 = 1
        local Event = game:GetService("ReplicatedStorage").Remotes["To_Server"]["Handle_Initiate_S"]
        Event:FireServer(A_1, A_2, A_3, A_4)
        task.wait(0.5)
    end
end

local Toggle = Misc:CreateToggle({
   Name = "Water Invencible",
   CurrentValue = false,
   Callback = function(enabled)
      if enabled then
         WaterGod = true
         while WaterGod do
            local ohString1 = "skil_ting_asd"
            local ohInstance2 = game:GetService("Players").LocalPlayer
            local ohString3 = "Water_fall_basin"
            local ohNumber4 = 1
            game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(ohString1, ohInstance2, ohString3, ohNumber4)
            task.wait(0.5)
         end
      else
         WaterGod = false
      end
   end,
})

Misc:CreateToggle({
    Name = "GodMode (Kamado)",
    CurrentValue = false,
    SectionParent = Settings,
    Callback = function(v)
        getgenv().god = v
        if getgenv().god then
            local ohBoolean1 = true

            game:GetService("ReplicatedStorage").Remotes.heal_tang123asd:FireServer(ohBoolean1)
        elseif not getgenv().god then
            local ohBoolean1 = false

            game:GetService("ReplicatedStorage").Remotes.heal_tang123asd:FireServer(ohBoolean1)
        end
end
})

Misc:CreateToggle({
    Name = "Inf Breath Regen",
    Flag = "Inf Breath Regen",
    Callback = function (bool)
        if bool then
            toggleActive = true
            toggleBreathing()
        else
            toggleActive = false
        end
    
    function toggleBreathing()
        if toggleActive then
            game:GetService("ReplicatedStorage").Remotes.regeneration_breathing_remote:FireServer(true)
            wait(25)
            game:GetService("ReplicatedStorage").Remotes.regeneration_breathing_remote:FireServer(false)
            wait(0.01) -- Aguarda uma pequena fração de segundo para evitar uma chamada imediata ao loop
            toggleBreathing()
        end
    end
    end
})

Misc:CreateToggle({
    Name = "WarFans Buff",
    Flag = "WarFans Buff",
    Callback = function (bool)
        toggleActivated = bool -- Atualiza o estado do toggle

    if toggleActivated then
        running = true -- Inicia o loop
        while running do -- Executa o loop enquanto running for verdadeiro
            game:GetService("ReplicatedStorage").Remotes.war_Drums_remote:FireServer(true)
            wait(20.1) -- Aguarda um tempo antes de reiniciar o buff (ajuste conforme necessário)
        end
    else
        running = false -- Interrompe o loop
        game:GetService("ReplicatedStorage").Remotes.war_Drums_remote:FireServer(false)
    end
    end
})

Misc:CreateToggle({
    Name = "Rengoku (Human)",
    Callback = function (bool)
        toggleActivated = bool -- Atualiza o estado do toggle

    if toggleActivated then
        running = true -- Inicia o loop
        while running do -- Executa o loop enquanto running for verdadeiro
            game:GetService("ReplicatedStorage").Remotes.heart_ablaze_mode_remote:FireServer(true)
            wait(28) -- Aguarda um tempo antes de reiniciar o buff (ajuste conforme necessário)
            game:GetService("ReplicatedStorage").Remotes.heart_ablaze_mode_remote:FireServer(false)
            wait(3)
        end
    else
        running = false -- Interrompe o loop
        game:GetService("ReplicatedStorage").Remotes.heart_ablaze_mode_remote:FireServer(false)
    end
    end
})

Misc:CreateToggle({
    Name = "GodSpeed (Human)",
    Flag = "GodSpeed (Human)",
    Callback = function (bool)
        toggleActivated = bool -- Atualiza o estado do toggle

        local args = {
            [1] = toggleActivated
        }

        game:GetService("ReplicatedStorage").Remotes.thundertang123:FireServer(args[1])
    end
})

Misc:CreateLabel("AutoSkil")

local AutoSkill = Misc:CreateToggle({
    Name = "Enable Auto Skill",
    CurrentValue = false,
    SectionParent = Miscs,
    Flag = "Skills",
    Callback = function(value)
        using_move = false
        stop_kill_aura = false
        _G.SkillMastery = value
        while _G.SkillMastery and task.wait() do
            for i,v in next, Skills do
                if v then
                    using_move = true
                end
                game:GetService("VirtualInputManager"):SendKeyEvent(v, i, false, game)
                using_move = false
                game:GetService("VirtualInputManager"):SendKeyEvent(false, i, false, game)
            end
        end
    end,
})

for i,v in next, Skills do
    local AutoUse = Misc:CreateToggle({
        Name = "Auto " .. i,
        CurrentValue = false,
        SectionParent = Miscs,
        Flag = "Skills",
        Callback = function(value)
            Skills[i] = value
        end,
    })
end
